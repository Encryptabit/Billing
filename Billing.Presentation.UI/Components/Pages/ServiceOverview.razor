@page "/external"
@using Billing.Application.UseCases.Billing
@using Billing.Application.UseCases.Organizations
@using Billing.Domain.Entities.Dto
@using WorkOS
@inject IGetWorkOSConnectionsQueryHandler GetWorkOSConnectionsQueryHandler
@inject IGetIdentityServerRestApiConnectionsQueryHandler GetIdentityServerRestApiConnectionsQueryHandler
@inject IGetBillingHistoryQueryHandler GetBillingHistoryQueryHandler
@inject IGetDatabasesQueryHandler GetDatabasesQueryHandler
@inject IGetDistributorEndUsersQueryHandler GetDistributorEndUsersQueryHandler
@inject IGetDistributorsQueryHandler GetDistributorsQueryHandler
@inject IGetEndUsersQueryHandler GetEndUsersQueryHandler
@inject IGetEndUserDatabasesQueryHandler GetEndUserDatabasesQueryHandler
@inject IGetOrganizationsQueryHandler GetOrganizationsQueryHandler
@rendermode InteractiveServer
@attribute [StreamRendering]

<PageTitle>Service Overview</PageTitle>
<FluentGrid Justify="JustifyContent.Center">
<FluentGridItem xs="12">
    <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Center">
        <h2>External API Sources</h2>
        <FluentButton Appearance="Appearance.Accent" Class="btn" @onclick="async () => { await RefreshConnectionsList(true); }">Query APIs and Rebuild Cache</FluentButton>
    </FluentStack>
</FluentGridItem>
<FluentGridItem xs="12" md="6" lg="4">
    <FluentCard MinimalStyle="true">
        <h4>WorkOS Connections</h4>
        <FluentDataGrid @ref="_grid" AutoFit="true" Items="@_workOsConnections">
            <ChildContent>
                <PropertyColumn Property="@(o => o.OrganizationId)" Sortable="true"/>
                <PropertyColumn Property="@(o => o.Name)" Sortable="true"/>
                <PropertyColumn Property="@(o => o.State)" Sortable="true"/>
            </ChildContent>
            <EmptyContent>
                <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Center">
                    Loading...<br/>
                    <FluentProgress Width="239px"/>
                </FluentStack>
            </EmptyContent>
            <LoadingContent>
                <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Center">
                    Loading...<br/>
                    <FluentProgress Width="239px"/>
                </FluentStack>
            </LoadingContent>
        </FluentDataGrid>
    </FluentCard>
</FluentGridItem>
<FluentGridItem xs="12" md="2">
    <FluentCard MinimalStyle="true">
        <h4>Rest API Connections</h4>
        <FluentDataGrid @ref="_identityGrid" AutoFit="true" Items="@_restApiConnections">
            <ChildContent>
                @*<TemplateColumn Title="DBID" property=""*@
                <PropertyColumn title="DBID" Property="@(restApiConnection => restApiConnection)" Sortable="true"/>
            </ChildContent>
            <EmptyContent>
                <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Center">
                    Loading...<br/>
                    <FluentProgress Width="239px"/>
                </FluentStack>
            </EmptyContent>
            <LoadingContent>
                <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Center">
                    Loading...<br/>
                    <FluentProgress Width="239px"/>
                </FluentStack>
            </LoadingContent>
        </FluentDataGrid>
    </FluentCard>
</FluentGridItem>

<FluentGridItem xs="12">
    <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Center">
        <FluentDivider Style="width: 100%;"></FluentDivider>
        <h2>Databases</h2>
        <FluentButton Appearance="Appearance.Accent" Class="btn" @onclick="async () => { await RefreshDatabaseInformation(true); }">Query Databases and Rebuild Cache</FluentButton>
    </FluentStack>
</FluentGridItem>
<FluentGridItem xs="12">
    <FluentCard MinimalStyle="true">
        <h4>BillingHistory</h4>
        <FluentDataGrid @ref="_billingDbGrid"
                        ResizableColumns="true"
                        Pagination="_billingPagination"
                        Items="@_filteredBillingDtos">
            <ChildContent>
                <PropertyColumn Property="@(o => o.RecordID)" Sortable="true"/>
                <PropertyColumn Property="@(o => o.DbId)" Sortable="true" Filtered="!string.IsNullOrWhiteSpace(DbIdFilter)">
                    <ColumnOptions>
                        <div class="search-box">
                            <FluentSearch type="search" Autofocus=true @bind-Value=DbIdFilter @oninput="HandleDbIdFilter" AfterBindValue="HandleClear" Placeholder="Enter DbId..."/>
                        </div>
                    </ColumnOptions>
                </PropertyColumn>
                <PropertyColumn Property="@(o => o.EventId)" Sortable="true"/>
                <PropertyColumn Property="@(o => o.ArcturusType)" Sortable="true"/>
                <PropertyColumn Property="@(o => o.Billed)" Sortable="true"/>
                <PropertyColumn Property="@(o => o.LastBillDate)" Sortable="true"/>
                <PropertyColumn Property="@(o => o.NextBillDate)" Sortable="true"/>
                <PropertyColumn Property="@(o => o.BillingCycle)" Sortable="true"/>
                <PropertyColumn Property="@(o => o.BillingCycleCustom)" Sortable="true"/>
                <PropertyColumn Property="@(o => o.VMI)" Sortable="true"/>
                <PropertyColumn Property="@(o => o.TimeStamp)" Sortable="true"/>
            </ChildContent>
            <EmptyContent>
                <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Center">
                    Loading...<br/>
                    <FluentProgress Width="239px"/>
                </FluentStack>
            </EmptyContent>
            <LoadingContent>
                <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Center">
                    Loading...<br/>
                    <FluentProgress Width="239px"/>
                </FluentStack>
            </LoadingContent>
        </FluentDataGrid>
        <FluentPaginator State="_billingPagination"></FluentPaginator>
        <FluentButton Appearance="Appearance.Accent" OnClick="async () => { var results = await GetAllBillingAsync(true); _billingDtos = results.AsQueryable(); _billingDbGrid?.SetLoadingState(false); }">Get All BillingHistory</FluentButton>
    </FluentCard>
</FluentGridItem>
<FluentGridItem xs="12" md="6">
    <FluentCard MinimalStyle="true">
        <h4>Databases</h4>
        <FluentDataGrid @ref="_databaseDbGrid"
                        ResizableColumns="true"
                        Pagination="_databasePagination"
                        Items="@_filteredDatabaseDtos">
            <ChildContent>
                <PropertyColumn Property="@(o => o.DbId)" Sortable="true" Filtered="!string.IsNullOrWhiteSpace(DbIdFilter)">
                    <ColumnOptions>
                        <div class="search-box">
                            <FluentSearch type="search" Autofocus=true @bind-Value=DbIdFilter @oninput="HandleDbIdFilter" AfterBindValue="HandleClear" Placeholder="Enter DbId..."/>
                        </div>
                    </ColumnOptions>
                </PropertyColumn>
                <PropertyColumn Property="@(o => o.Company)" Sortable="true"/>
                <PropertyColumn Property="@(o => o.ArcturusType)" Sortable="true"/>
                <PropertyColumn Property="@(o => o.Vmi)" Sortable="true"/>
            </ChildContent>
            <EmptyContent>
                <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Center">
                    Loading...<br/>
                    <FluentProgress Width="239px"/>
                </FluentStack>
            </EmptyContent>
            <LoadingContent>
                <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Center">
                    Loading...<br/>
                    <FluentProgress Width="239px"/>
                </FluentStack>
            </LoadingContent>
        </FluentDataGrid>
        <FluentPaginator State="_databasePagination"></FluentPaginator>
        <FluentButton Appearance="Appearance.Accent" OnClick="async () => { var results = await GetAllDatabasesAsync(true); _databaseDtos = results.AsQueryable(); _databaseDbGrid?.SetLoadingState(false); }">Get All Databases</FluentButton>
    </FluentCard>
</FluentGridItem>

<FluentGridItem xs="12" md="6">
    <FluentCard MinimalStyle="true">
        <h4>EndUserDatabase </h4>
        <FluentDataGrid Pagination="_endUserDatabasePagination"
                        ResizableColumns="true"
                        @ref="_endUserDatabaseDbGrid"
                        Items="@_filteredEndUserDatabaseDtos">

            <ChildContent>
                <PropertyColumn Property="@(o => o.Id)" Sortable="true"/>
                <PropertyColumn Property="@(o => o.DbId)" Sortable="true" Filtered="!string.IsNullOrWhiteSpace(DbIdFilter)">
                    <ColumnOptions>
                        <div class="search-box">
                            <FluentSearch type="search" Autofocus=true @bind-Value=DbIdFilter @oninput="HandleDbIdFilter" AfterBindValue="HandleClear" Placeholder="Enter DbId..."/>
                        </div>
                    </ColumnOptions>
                </PropertyColumn>
                <PropertyColumn Property="@(o => o.EndUserId)" Sortable="true" Filtered="!string.IsNullOrWhiteSpace(EndUserIdFilter)">
                    <ColumnOptions>
                        <div class="search-box">
                            <FluentSearch type="search" Autofocus=true @bind-Value=EndUserIdFilter @oninput="HandleEndUserIdFilter" AfterBindValue="HandleClear" Placeholder="Enter EndUserId..."/>
                        </div>
                    </ColumnOptions>
                </PropertyColumn>
            </ChildContent>
            <EmptyContent>
                <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Center">
                    Loading...<br/>
                    <FluentProgress Width="239px"/>
                </FluentStack>
            </EmptyContent>
            <LoadingContent>
                <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Center">
                    Loading...<br/>
                    <FluentProgress Width="239px"/>
                </FluentStack>
            </LoadingContent>
        </FluentDataGrid>
        <FluentPaginator State="_endUserDatabasePagination"></FluentPaginator>
        <FluentButton Appearance="Appearance.Accent"
                      OnClick="async () => { var results = await GetAllEndUserDatabasesAsync(true); _endUserDatabaseDtos = results.AsQueryable(); _endUserDatabaseDbGrid?.SetLoadingState(false); }">
            Get All End-Users
        </FluentButton>
    </FluentCard>
</FluentGridItem>
<FluentGridItem xs="12" md="6" lg="4">
    <FluentCard MinimalStyle="true">
        <h4>Distributors</h4>
        <FluentDataGrid @ref="_distributorDbGrid"
                        ResizableColumns="true"
                        Pagination="_distributorPagination"
                        Items="@_filteredDistributorDtos">
            <ChildContent>
                <PropertyColumn Property="@(o => o.Id)" Sortable="true" Filtered="!string.IsNullOrEmpty(DistributorIdFilter)">

                    <ColumnOptions>
                        <div class="search-box">
                            <FluentSearch type="search" Autofocus=true @bind-Value=DistributorIdFilter @oninput="HandleDistributorIdFilter" AfterBindValue="HandleClear" Placeholder="Enter DistributorId..."/>
                        </div>
                    </ColumnOptions>
                </PropertyColumn>
                <PropertyColumn Property="@(o => o.Name)" Sortable="true"/>
                <PropertyColumn Property="@(o => o.OrganizationID)" Sortable="true" Filtered="!string.IsNullOrEmpty(OrganizationIdFilter)">
                    <ColumnOptions>
                        <div class="search-box">
                            <FluentSearch type="search" Autofocus=true @bind-Value=OrganizationIdFilter @oninput="HandleOrgIdFilter" AfterBindValue="HandleClear" Placeholder="Enter OrgId..."/>
                        </div>
                    </ColumnOptions>
                </PropertyColumn>
                <PropertyColumn Property="@(o => o.Direct)" Sortable="true"/>
            </ChildContent>
            <EmptyContent>
                <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Center">
                    Loading...<br/>
                    <FluentProgress Width="239px"/>
                </FluentStack>
            </EmptyContent>
            <LoadingContent>
                <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Center">
                    Loading...<br/>
                    <FluentProgress Width="239px"/>
                </FluentStack>
            </LoadingContent>
        </FluentDataGrid>
        <FluentPaginator State="_distributorPagination"></FluentPaginator>
        <FluentButton Appearance="Appearance.Accent" OnClick="async () => { var results = await GetAllDistributorsAsync(true); _distributorDtos = results.AsQueryable(); _distributorDbGrid?.SetLoadingState(false); }">Get All Distributors</FluentButton>
    </FluentCard>
</FluentGridItem>

<FluentGridItem xs="12" md="4" lg="4">
    <FluentCard MinimalStyle="true">
        <h4>DistributorEndUser</h4>
        <FluentDataGrid @ref="_distributorEndUserDbGrid" ResizableColumns="true" Pagination="_distributorEndUserPagination" Items="@_filteredDistributorEndUserDtos">
            <ChildContent>
                <PropertyColumn Property="@(o => o.Id)" Sortable="true"/>
                <PropertyColumn Property="@(o => o.DistributorId)" Sortable="true" Filtered="!string.IsNullOrEmpty(DistributorIdFilter)">

                    <ColumnOptions>
                        <div class="search-box">
                            <FluentSearch type="search" Autofocus=true @bind-Value=DistributorIdFilter @oninput="HandleDistributorIdFilter" AfterBindValue="HandleClear" Placeholder="Enter DistributorId..."/>
                        </div>
                    </ColumnOptions>
                </PropertyColumn>
                <PropertyColumn Property="@(o => o.EndUserId)" Sortable="true" Filtered="!string.IsNullOrEmpty(EndUserIdFilter)">
                    <ColumnOptions>
                        <div class="search-box">
                            <FluentSearch type="search" Autofocus=true @bind-Value=EndUserIdFilter @oninput="HandleEndUserIdFilter" AfterBindValue="HandleClear" Placeholder="Enter EndUserId..."/>
                        </div>
                    </ColumnOptions>
                </PropertyColumn>
            </ChildContent>
            <EmptyContent>
                <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Center">
                    Loading...<br/>
                    <FluentProgress Width="239px"/>
                </FluentStack>
            </EmptyContent>
            <LoadingContent>
                <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Center">
                    Loading...<br/>
                    <FluentProgress Width="239px"/>
                </FluentStack>
            </LoadingContent>
        </FluentDataGrid>
        <FluentPaginator State="_distributorEndUserPagination"></FluentPaginator>
        <FluentButton Appearance="Appearance.Accent" OnClick="async () => { var results = await GetAllDistributorEndUsersAsync(true); _distributorEndUserDtos = results.AsQueryable(); _distributorEndUserDbGrid?.SetLoadingState(false); }">Get All DistributorEndUsers</FluentButton>
    </FluentCard>
</FluentGridItem>

<FluentGridItem xs="12" md="6" lg="4">
    <FluentCard MinimalStyle="true">
        <h4>EndUsers</h4>
        <FluentDataGrid Pagination="_endUserPagination"
                        ResizableColumns="true"
                        @ref="_endUserDbGrid"
                        Items="@_filteredEndUserDtos">
            <ChildContent>
                <PropertyColumn Property="@(o => o.Id)" Sortable="true" Filtered="!string.IsNullOrEmpty(EndUserIdFilter)">
                    <ColumnOptions>
                        <div class="search-box">
                            <FluentSearch type="search" Autofocus=true @bind-Value=EndUserIdFilter @oninput="HandleEndUserIdFilter" AfterBindValue="HandleClear" Placeholder="Enter EndUserId..."/>
                        </div>
                    </ColumnOptions>
                </PropertyColumn>
                <PropertyColumn Property="@(o => o.Name)" Sortable="true"/>
                <PropertyColumn Property="@(o => o.OrganizationID)" Sortable="true" Filtered="!string.IsNullOrEmpty(OrganizationIdFilter)">
                    <ColumnOptions>
                        <div class="search-box">
                            <FluentSearch type="search" Autofocus=true @bind-Value=OrganizationIdFilter @oninput="HandleOrgIdFilter" AfterBindValue="HandleClear" Placeholder="Enter OrgId..."/>
                        </div>
                    </ColumnOptions>
                </PropertyColumn>

            </ChildContent>
            <EmptyContent>
                <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Center">
                    Loading...<br/>
                    <FluentProgress Width="239px"/>
                </FluentStack>
            </EmptyContent>
            <LoadingContent>
                <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Center">
                    Loading...<br/>
                    <FluentProgress Width="239px"/>
                </FluentStack>
            </LoadingContent>
        </FluentDataGrid>
        <FluentPaginator State="_endUserPagination"></FluentPaginator>
        <FluentButton Appearance="Appearance.Accent"
                      OnClick="async () => { var results = await GetAllEndUsersAsync(true); _endUserDtos = results.AsQueryable(); _endUserDbGrid?.SetLoadingState(false); }">
            Get All End-Users
        </FluentButton>

    </FluentCard>
</FluentGridItem>

<FluentGridItem xs="12" md="6" lg="4">
    <FluentCard MinimalStyle="true">
        <h4>Organizations</h4>
        <FluentDataGrid @ref="_orgDbGrid"
                        Pagination="_organizationPagination"
                        ResizableColumns="true"
                        Items="@_filteredOrganizationDtos">
            <ChildContent>
                <PropertyColumn Property="@(o => o.Enabled)" Sortable="true"/>
                <PropertyColumn Property="@(o => o.OrganizationID)" Sortable="true" Filtered="!string.IsNullOrEmpty(OrganizationIdFilter)">
                    <ColumnOptions>
                        <div class="search-box">
                            <FluentSearch type="search" Autofocus=true @bind-Value=OrganizationIdFilter @oninput="HandleOrgIdFilter" AfterBindValue="HandleClear" Placeholder="Enter OrgId..."/>
                        </div>
                    </ColumnOptions>
                </PropertyColumn>
                <PropertyColumn Property="@(o => o.SSOOrganizationID)" Sortable="true"/>
            </ChildContent>
            <EmptyContent>
                <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Center">
                    Loading...<br/>
                    <FluentProgress Width="239px"/>
                </FluentStack>
            </EmptyContent>
            <LoadingContent>
                <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Center">
                    Loading...<br/>
                    <FluentProgress Width="239px"/>
                </FluentStack>
            </LoadingContent>
        </FluentDataGrid>
        <FluentPaginator State="_organizationPagination"></FluentPaginator>
        <FluentButton Appearance="Appearance.Accent"
                      OnClick="async () => { var results = await GetAllOrganizationsAsync(true); _organizationDtos = results.AsQueryable(); _orgDbGrid?.SetLoadingState(false); }">
            Get All Organizations
        </FluentButton>
    </FluentCard>
</FluentGridItem>
</FluentGrid>


@code {

    // APIs
    private IQueryable<Connection>? _workOsConnections;
    private IQueryable<int>? _restApiConnections;

    // Databases
    private IQueryable<BillingDto>? _billingDtos;
    private IQueryable<BillingDto>? _filteredBillingDtos => _billingDtos?.Where(bDto => bDto.DbId.ToString().Contains(DbIdFilter));


    private IQueryable<DatabaseDto>? _databaseDtos;
    private IQueryable<DatabaseDto>? _filteredDatabaseDtos => _databaseDtos?.Where(dbDto => dbDto.DbId.ToString().Contains(DbIdFilter));

    private IQueryable<EndUserDatabaseDto>? _endUserDatabaseDtos;
    private IQueryable<EndUserDatabaseDto>? _filteredEndUserDatabaseDtos =>
        _endUserDatabaseDtos?
            .Where(eudbDto => eudbDto.DbId.ToString().Contains(DbIdFilter))
            .Where(eudbDto => eudbDto.EndUserId.ToString().Contains(EndUserIdFilter));

    private IQueryable<DistributorEndUserDto>? _distributorEndUserDtos;
    private IQueryable<DistributorEndUserDto>? _filteredDistributorEndUserDtos =>
        _distributorEndUserDtos?
            .Where(dEuDto => dEuDto.DistributorId.ToString().Contains(DistributorIdFilter))
            .Where(dEuDto => dEuDto.EndUserId.ToString().Contains(EndUserIdFilter));


    private IQueryable<DistributorDto>? _distributorDtos;
    private IQueryable<DistributorDto>? _filteredDistributorDtos =>
        _distributorDtos?
            .Where(dDto => dDto.OrganizationID.ToString().Contains(OrganizationIdFilter))
            .Where(dDto => dDto.Id.ToString().Contains(DistributorIdFilter));

    private IQueryable<EndUserDto>? _endUserDtos;
    private IQueryable<EndUserDto>? _filteredEndUserDtos => 
        _endUserDtos?
            .Where(euDto => euDto.Id.ToString().Contains(EndUserIdFilter))
            .Where(euDto => euDto.OrganizationID.ToString().Contains(OrganizationIdFilter));

    private IQueryable<OrganizationDto>? _organizationDtos;
    private IQueryable<OrganizationDto>? _filteredOrganizationDtos => _organizationDtos?.Where(oDto => oDto.OrganizationID.ToString().Contains(OrganizationIdFilter));


    // Grids
    FluentDataGrid<Connection>? _grid;
    FluentDataGrid<int>? _identityGrid;
    FluentDataGrid<BillingDto>? _billingDbGrid;
    FluentDataGrid<DatabaseDto>? _databaseDbGrid;
    FluentDataGrid<DistributorEndUserDto>? _distributorEndUserDbGrid;
    FluentDataGrid<DistributorDto>? _distributorDbGrid;
    FluentDataGrid<EndUserDatabaseDto>? _endUserDatabaseDbGrid;
    FluentDataGrid<EndUserDto>? _endUserDbGrid;
    FluentDataGrid<OrganizationDto>? _orgDbGrid;

    // Individuial pagination
    private readonly PaginationState? _endUserDatabasePagination = new() { ItemsPerPage = 10 };
    private readonly PaginationState? _endUserPagination = new() { ItemsPerPage = 10 };
    private readonly PaginationState? _billingPagination = new() { ItemsPerPage = 10 };
    private readonly PaginationState? _databasePagination = new() { ItemsPerPage = 10 };
    private readonly PaginationState? _distributorPagination = new() { ItemsPerPage = 10 };
    private readonly PaginationState? _distributorEndUserPagination = new() { ItemsPerPage = 10 };
    private readonly PaginationState? _organizationPagination = new() { ItemsPerPage = 10 };

    // Shared Filters
    public string DbIdFilter = string.Empty;
    public string OrganizationIdFilter = string.Empty;
    public string EndUserIdFilter = string.Empty;
    public string DistributorIdFilter = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        _grid?.SetLoadingState(true);
        _identityGrid?.SetLoadingState(true);
        _orgDbGrid?.SetLoadingState(true);
        _ = RefreshConnectionsList();
        _grid?.SetLoadingState(false);
        _identityGrid?.SetLoadingState(false);
        _ = RefreshDatabaseInformation();
        _orgDbGrid?.SetLoadingState(false);
    }


    private void HandleDbIdFilter(ChangeEventArgs args)
    {
        if (args.Value is string value)
        {
            DbIdFilter = value;
        }
    }

    private void HandleOrgIdFilter(ChangeEventArgs args)
    {
        if (args.Value is string value)
        {
            OrganizationIdFilter = value;
        }
    }

    private void HandleEndUserIdFilter(ChangeEventArgs args)
    {
        if (args.Value is string value)
        {
            EndUserIdFilter = value;
        }
    }

    private void HandleDistributorIdFilter(ChangeEventArgs args)
    {
        if (args.Value is string value)
        {
            DistributorIdFilter = value;
        }
    }

    private void HandleClear()
    {
        if (string.IsNullOrWhiteSpace(DbIdFilter))
        {
            DbIdFilter = string.Empty;
        }

        if (string.IsNullOrWhiteSpace(OrganizationIdFilter))
        {
            OrganizationIdFilter = string.Empty;
        }
    }

    public async Task RefreshConnectionsList(bool rebuildCache = false)
    {
        if (rebuildCache)
        {
            _workOsConnections = null;
            _restApiConnections = null;
            _grid?.SetLoadingState(true);
            _identityGrid?.SetLoadingState(true);
        }

        Task<WorkOSList<Connection>> workOSTask = GetWorkOSConnectionsQueryHandler.Handle(
            new GetWorkOSConnectionsQuery(rebuildCache),
            new CancellationToken());

        Task<List<int>> identityServerTask = GetIdentityServerRestApiConnectionsQueryHandler.Handle(
            new GetIdentityServerRestApiConnectionsQuery(rebuildCache),
            new CancellationToken());

        List<Task> tasks =
        [
            workOSTask,
            identityServerTask
        ];

        while (tasks.Any())
        {
            var result = await Task.WhenAny(tasks);

            if (result == workOSTask)
            {
                WorkOSList<Connection> workOsList = await workOSTask;
                _workOsConnections = workOsList.Data.AsQueryable();
                _grid?.SetLoadingState(false);
                StateHasChanged();
            }

            if (result == identityServerTask)
            {
                var restApiList = await identityServerTask;
                _restApiConnections = restApiList.AsQueryable();
                _identityGrid?.SetLoadingState(false);
                StateHasChanged();
            }

            tasks.Remove(result);
        }
    }


    private Task<IEnumerable<BillingDto>> GetAllBillingAsync(bool rebuildCache = false)
    {
        var query = new GetAllBillingHistoryQuery(rebuildCache);

        if (rebuildCache)
        {
            _billingDtos = null;
            _billingDbGrid?.SetLoadingState(true);
        }

        return GetBillingHistoryQueryHandler.Handle(
            query,
            new CancellationToken());
    }

    private Task<IEnumerable<DatabaseDto>> GetAllDatabasesAsync(bool rebuildCache = false)
    {
        var query = new GetAllDatabasesQuery(rebuildCache);

        if (rebuildCache)
        {
            _databaseDtos = null;
            _databaseDbGrid?.SetLoadingState(true);
        }

        return GetDatabasesQueryHandler.Handle(
            query,
            new CancellationToken());
    }


    private Task<IEnumerable<DistributorEndUserDto>> GetAllDistributorEndUsersAsync(bool rebuildCache = false)
    {
        var query = new GetAllDistributorEndUsersQuery(rebuildCache);

        if (rebuildCache)
        {
            _distributorEndUserDtos = null;
            _distributorEndUserDbGrid?.SetLoadingState(true);
        }

        return GetDistributorEndUsersQueryHandler.Handle(
            query,
            new CancellationToken());
    }

    private Task<IEnumerable<DistributorDto>> GetAllDistributorsAsync(bool rebuildCache = false)
    {
        var query = new GetAllDistributorsQuery(rebuildCache);

        if (rebuildCache)
        {
            _distributorDtos = null;
            _distributorDbGrid?.SetLoadingState(true);
        }

        return GetDistributorsQueryHandler.Handle(
            query,
            new CancellationToken());
    }


    private Task<IEnumerable<EndUserDatabaseDto>> GetAllEndUserDatabasesAsync(bool rebuildCache = false)
    {
        var query = new GetAllEndUserDatabasesQuery(rebuildCache);

        if (rebuildCache)
        {
            _endUserDatabaseDtos = null;
            _endUserDatabaseDbGrid?.SetLoadingState(true);
        }

        return GetEndUserDatabasesQueryHandler.Handle(
            query,
            new CancellationToken());
    }

    private Task<IEnumerable<EndUserDto>> GetAllEndUsersAsync(bool rebuildCache = false)
    {
        var query = new GetAllEndUsersQuery(rebuildCache);

        if (rebuildCache)
        {
            _endUserDtos = null;
            _endUserDbGrid?.SetLoadingState(true);
        }

        return GetEndUsersQueryHandler.Handle(
            query,
            new CancellationToken());
    }

    private Task<IEnumerable<OrganizationDto>> GetAllOrganizationsAsync(bool rebuildCache = false)
    {
        var query = new GetAllOrganizationsQuery(rebuildCache);

        if (rebuildCache)
        {
            _orgDbGrid?.SetLoadingState(true);
            _organizationDtos = null;
        }

        return GetOrganizationsQueryHandler.Handle(
            query,
            new CancellationToken());
    }


    public async Task RefreshDatabaseInformation(bool rebuildCache = false)
    {
        Task<IEnumerable<BillingDto>> bTask = GetAllBillingAsync(rebuildCache);
        Task<IEnumerable<DatabaseDto>> dbTask = GetAllDatabasesAsync(rebuildCache);
        Task<IEnumerable<DistributorEndUserDto>> dEuTask = GetAllDistributorEndUsersAsync(rebuildCache);
        Task<IEnumerable<DistributorDto>> dTask = GetAllDistributorsAsync(rebuildCache);
        Task<IEnumerable<EndUserDatabaseDto>> euDbTask = GetAllEndUserDatabasesAsync(rebuildCache);
        Task<IEnumerable<EndUserDto>> euTask = GetAllEndUsersAsync(rebuildCache);
        Task<IEnumerable<OrganizationDto>> oTask = GetAllOrganizationsAsync(rebuildCache);

        List<Task> tasks =
        [
            bTask,
            dbTask,
            dEuTask,
            dTask,
            euDbTask,
            euTask,
            oTask
        ];

        while (tasks.Any())
        {
            var result = await Task.WhenAny(tasks);

            switch (result)
            {
                case var value when value == bTask:
                    IEnumerable<BillingDto> bList = await bTask;
                    _billingDtos = bList.AsQueryable();
                    _billingDbGrid?.SetLoadingState(false);
                    StateHasChanged();
                    break;
                case var value when value == dbTask:
                    IEnumerable<DatabaseDto> dbList = await dbTask;
                    _databaseDtos = dbList.AsQueryable();
                    _databaseDbGrid?.SetLoadingState(false);
                    StateHasChanged();
                    break;
                case var value when value == dEuTask:
                    IEnumerable<DistributorEndUserDto> dEuList = await dEuTask;
                    _distributorEndUserDtos = dEuList.AsQueryable();
                    _distributorEndUserDbGrid?.SetLoadingState(false);
                    StateHasChanged();
                    break;
                case var value when value == dTask:
                    IEnumerable<DistributorDto> dList = await dTask;
                    _distributorDtos = dList.AsQueryable();
                    _distributorDbGrid?.SetLoadingState(false);
                    StateHasChanged();
                    break;
                case var value when value == euDbTask:
                    IEnumerable<EndUserDatabaseDto> euDbList = await euDbTask;
                    _endUserDatabaseDtos = euDbList.AsQueryable();
                    _endUserDatabaseDbGrid?.SetLoadingState(false);
                    StateHasChanged();
                    break;
                case var value when value == euTask:
                    IEnumerable<EndUserDto> euList = await euTask;
                    _endUserDtos = euList.AsQueryable();
                    _endUserDbGrid?.SetLoadingState(false);
                    StateHasChanged();
                    break;
                case var value when value == oTask:
                    IEnumerable<OrganizationDto> oList = await oTask;
                    _organizationDtos = oList.AsQueryable();
                    _orgDbGrid?.SetLoadingState(false);
                    StateHasChanged();
                    break;
                default:
                    continue;
            }

            tasks.Remove(result);
        }
    }


}